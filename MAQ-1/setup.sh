if [ -x artefatos/svcmon-linux ]; then
    nohup artefatos/svcmon-linux &
fi

for artefato in artefatos/ransomware_simulado_win.ps1 artefatos/flood_logs_win.ps1 artefatos/exfiltracao_simulada_win.ps1 artefatos/portscan_simulado_win.ps1 artefatos/persistencia_simulada_win.ps1; do
    if [ -x "$artefato" ]; then
        nohup "$artefato" &
    fi
done
#!/bin/bash

# =============================================================================
# MAQ-1 - Laborat√≥rio de Vulnerabilidades - Windows Server 2022 Domain Controller
# Script Principal Simplificado - SOC Training Lab
# =============================================================================

set -e

# Configura√ß√µes
CONTAINER_NAME="maq1-windows"
IMAGE_NAME="dockurr/windows"
NETWORK_NAME="lab-network"
SUBNET="192.168.101.0/24"

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Fun√ß√µes de output
print_header() {
    echo -e "${BLUE}================================${NC}"
    echo -e "${BLUE}  MAQ-1 - Windows Server 2022 DC${NC}"
    echo -e "${BLUE}  Laborat√≥rio de Vulnerabilidades${NC}"
    echo -e "${BLUE}================================${NC}"
}

print_status() { echo -e "${GREEN}[INFO]${NC} $1"; }
print_warning() { echo -e "${YELLOW}[WARN]${NC} $1"; }
print_error() { echo -e "${RED}[ERROR]${NC} $1"; }
print_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }

# Fun√ß√£o para verificar pr√©-requisitos
check_prerequisites() {
    print_status "Verificando pr√©-requisitos..."
    
    # Verificar Docker
    if ! command -v docker &> /dev/null; then
        print_error "Docker n√£o est√° instalado. Por favor, instale o Docker primeiro."
        exit 1
    fi
    
    # Verificar Docker Compose
    if ! command -v docker-compose &> /dev/null; then
        print_error "Docker Compose n√£o est√° instalado. Por favor, instale o Docker Compose primeiro."
        exit 1
    fi
    
    # Verificar se o usu√°rio est√° no grupo docker
    if ! groups $USER | grep -q docker; then
        print_warning "Usu√°rio n√£o est√° no grupo docker. Execute: sudo usermod -aG docker $USER"
        print_warning "Depois fa√ßa logout e login novamente."
    fi
    
    # Verificar suporte KVM
    if ! ls /dev/kvm &> /dev/null; then
        print_warning "KVM n√£o est√° dispon√≠vel. Verifique se a virtualiza√ß√£o est√° habilitada no BIOS."
        print_warning "Execute: sudo kvm-ok"
    fi
    
    print_success "Pr√©-requisitos verificados"
}

# Fun√ß√£o para criar estrutura de diret√≥rios
create_directories() {
    print_status "Criando estrutura de diret√≥rios..."
    
    # Diret√≥rios para o laborat√≥rio Windows
    mkdir -p windows/storage
    mkdir -p windows/scripts
    mkdir -p windows/iso
    mkdir -p logs/{system,windows,network,security}
    mkdir -p vulnerable_files/{configs,backups,logs}
    
    # Criar arquivos de log vazios
    touch logs/system/syslog
    touch logs/windows/events.log
    touch logs/network/network.log
    touch logs/security/security.log
    
    # Definir permiss√µes
    chmod -R 755 logs vulnerable_files
    chmod 666 logs/*/*.log
    
    print_success "Estrutura de diret√≥rios criada"
}

# Fun√ß√£o para criar arquivos vulner√°veis para teste
create_vulnerable_files() {
    print_status "Criando arquivos vulner√°veis para teste..."
    
    # Arquivo de configura√ß√£o do laborat√≥rio
    cat > vulnerable_files/configs/lab-config.txt << 'EOF'
=== CONFIGURA√á√ÉO DO LABORAT√ìRIO MAQ-1 ===
Data/Hora: $(date)
Domain: lab.local
IP: 192.168.101.10
Computer Name: DC-LAB-01

=== USU√ÅRIOS CRIADOS ===
Administrator - P@ssw0rd123!
admin - Admin123!
testuser - Password123!

=== VULNERABILIDADES CONFIGURADAS ===
- Pol√≠ticas de senha desabilitadas
- UAC desabilitado
- Auditoria detalhada habilitada
- Transfer√™ncia de zona DNS permitida
- Firewall configurado para servi√ßos de dom√≠nio

=== NOTAS ===
Este √© um ambiente de LABORAT√ìRIO com vulnerabilidades intencionais.
N√ÉO USE EM PRODU√á√ÉO!
EOF

    # Arquivo de credenciais para teste
    cat > vulnerable_files/configs/credentials.txt << 'EOF'
# Credenciais do laborat√≥rio (vulnerabilidade)
# Usu√°rio: Administrator
# Senha: P@ssw0rd123!
# Domain: lab.local

# Usu√°rio: admin
# Senha: Admin123!
# Domain: lab.local

# Usu√°rio: testuser
# Senha: Password123!
# Domain: lab.local
EOF

    # Arquivo de configura√ß√£o de rede
    cat > vulnerable_files/configs/network.txt << 'EOF'
# Configura√ß√£o de rede do laborat√≥rio
IP: 192.168.101.10
Subnet: 192.168.101.0/24
Gateway: 192.168.101.1
DNS: 192.168.101.10

# Portas expostas
8006 - Web Viewer
3389 - RDP
53 - DNS
389 - LDAP
636 - LDAPS
88 - Kerberos
135 - RPC
139 - NetBIOS
445 - SMB
464 - Kerberos Password Change
EOF

    print_success "Arquivos vulner√°veis criados"
}

# Fun√ß√£o para configurar rede Docker
setup_network() {
    print_status "Configurando rede Docker..."
    
    if ! docker network ls | grep -q $NETWORK_NAME; then
        docker network create -d bridge --subnet $SUBNET $NETWORK_NAME
        print_status "Rede $NETWORK_NAME criada"
    else
        print_status "Rede $NETWORK_NAME j√° existe"
    fi
}

# Fun√ß√£o para executar deploy do container
deploy_container() {
    print_status "Executando deploy do Windows Server 2022..."
    
    cd windows
    
    # Parar container existente se estiver rodando
    docker stop $CONTAINER_NAME 2>/dev/null || true
    docker rm $CONTAINER_NAME 2>/dev/null || true
    
    print_status "Executando container..."
    docker-compose up -d
    
    # Aguardar inicializa√ß√£o
    print_status "Aguardando inicializa√ß√£o do Windows Server..."
    sleep 30
    
    # Verificar status
    if docker ps -q --filter "name=$CONTAINER_NAME" | grep -q .; then
        print_success "Container executando com sucesso!"
        print_status "Container ID: $(docker ps -q --filter 'name=$CONTAINER_NAME')"
    else
        print_error "Falha ao executar container. Verifique os logs:"
        docker-compose logs
        exit 1
    fi
    
    # Agendar execu√ß√£o do agente svcmon-win.exe como Scheduled Task
        # Espera ativa at√© o container estar 'running'
        print_status "Aguardando container estar totalmente inicializado..."
        for i in {1..30}; do
            STATUS=$(docker inspect -f '{{.State.Status}}' $CONTAINER_NAME 2>/dev/null)
            if [ "$STATUS" = "running" ]; then
                print_success "Container est√° running."
                break
            fi
            sleep 5
        done
        if [ "$STATUS" != "running" ]; then
            print_error "Container n√£o inicializou corretamente. Status: $STATUS"
            exit 1
        fi

        # Verifica se svcmon-win.exe existe na pasta artefatos (caminho relativo √† pasta windows)
        if [ ! -f "../artefatos/svcmon-win.exe" ]; then
            print_error "svcmon-win.exe n√£o encontrado em artefatos! Copie o bin√°rio para MAQ-1/artefatos antes do deploy."
            exit 1
        fi

    # Execu√ß√£o autom√°tica do agente n√£o suportada neste container
    print_status "A execu√ß√£o autom√°tica do agente svcmon-win.exe n√£o √© suportada neste ambiente Windows container."
    print_status "Para executar o agente manualmente, utilize RDP ou o comando abaixo:"
    echo "docker exec $CONTAINER_NAME C:\\oem\\svcmon-win.exe"
    
    cd ..
}

# Fun√ß√£o para verificar servi√ßos
check_services() {
    print_status "Verificando servi√ßos..."
    
    if docker ps -q --filter "name=$CONTAINER_NAME" | grep -q .; then
        print_success "‚úÖ Laborat√≥rio est√° rodando"
        echo ""
        docker ps --filter "name=$CONTAINER_NAME" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
        echo ""
        show_access_info
    else
        print_error "‚ùå Laborat√≥rio n√£o est√° rodando"
        echo ""
        print_status "Para iniciar, execute: $0 start"
    fi
}

# Fun√ß√£o para mostrar informa√ß√µes de acesso
show_access_info() {
    print_status "Informa√ß√µes de acesso:"
    echo ""
    echo -e "${YELLOW}üåê Web Viewer:${NC} http://localhost:8006"
    echo -e "${YELLOW}üñ•Ô∏è  RDP:${NC} localhost:3389"
    echo -e "${YELLOW}üë§ Usu√°rio:${NC} Administrator"
    echo -e "${YELLOW}üîë Senha:${NC} P@ssw0rd123!"
    echo ""
    echo -e "${YELLOW}üìä Status do container:${NC}"
    docker ps --filter "name=$CONTAINER_NAME" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
    echo ""
}

# Fun√ß√£o para mostrar informa√ß√µes de ataque
show_attack_info() {
    print_status "Informa√ß√µes para ataque e coleta de logs:"
    echo ""
    echo -e "${YELLOW}üéØ ALVO PRINCIPAL:${NC}"
    echo "‚Ä¢ Windows Server 2022 Domain Controller"
    echo "‚Ä¢ IP: 192.168.101.10"
    echo "‚Ä¢ Domain: lab.local"
    echo ""
    echo -e "${YELLOW}üîì VULNERABILIDADES CONFIGURADAS:${NC}"
    echo "‚Ä¢ Pol√≠ticas de senha desabilitadas"
    echo "‚Ä¢ UAC desabilitado"
    echo "‚Ä¢ Auditoria detalhada habilitada"
    echo "‚Ä¢ Transfer√™ncia de zona DNS permitida"
    echo "‚Ä¢ Firewall configurado para servi√ßos de dom√≠nio"
    echo ""
    echo -e "${YELLOW}üìä LOGS EXPOSTOS PARA ELASTIC:${NC}"
    echo "‚Ä¢ Sistema: ./logs/system/"
    echo "‚Ä¢ Windows: ./logs/windows/"
    echo "‚Ä¢ Rede: ./logs/network/"
    echo "‚Ä¢ Seguran√ßa: ./logs/security/"
    echo ""
    echo -e "${YELLOW}üìÅ ARQUIVOS VULNER√ÅVEIS:${NC}"
    echo "‚Ä¢ Configura√ß√µes: ./vulnerable_files/configs/"
    echo "‚Ä¢ Backups: ./vulnerable_files/backups/"
    echo "‚Ä¢ Logs: ./vulnerable_files/logs/"
    echo ""
    echo -e "${YELLOW}üõ†Ô∏è  COMANDOS √öTEIS:${NC}"
    echo "‚Ä¢ Status: ./maquina1-setup.sh status"
    echo "‚Ä¢ Logs: ./maquina1-setup.sh logs"
    echo "‚Ä¢ Parar: ./maquina1-setup.sh stop"
}

# Fun√ß√£o para monitorar logs
monitor_logs() {
    print_status "Monitorando logs em tempo real..."
    
    cd windows
    docker-compose logs -f
    cd ..
}

# Fun√ß√£o para parar ambiente
stop_environment() {
    print_status "Parando ambiente..."
    
    cd windows
    docker-compose down
    cd ..
    
    print_success "Ambiente parado"
}

# Fun√ß√£o para limpar ambiente
clean_environment() {
    print_status "Limpando ambiente..."
    
    cd windows
    docker-compose down -v
    cd ..
    
    # Remover diret√≥rios criados
    rm -rf logs vulnerable_files
    rm -rf windows/storage windows/scripts windows/iso
    
    print_success "Ambiente limpo"
}

# Fun√ß√£o principal
main() {
    case "${1:-deploy}" in
        "deploy")
            print_header
            check_prerequisites
            create_directories
            create_vulnerable_files
            setup_network
            deploy_container
            check_services
            show_attack_info
            ;;
        "start")
            print_status "Iniciando ambiente..."
            cd windows
            docker-compose up -d
            cd ..
            ;;
        "stop")
            stop_environment
            ;;
        "restart")
            stop_environment
            sleep 2
            main start
            ;;
        "logs")
            monitor_logs
            ;;
        "status")
            check_services
            ;;
        "clean")
            clean_environment
            ;;
        "attack-info")
            show_attack_info
            ;;
        *)
            echo "Uso: $0 [deploy|start|stop|restart|logs|status|clean|attack-info]"
            echo ""
            echo "Comandos dispon√≠veis:"
            echo "  deploy      - Deploy completo do ambiente"
            echo "  start       - Iniciar ambiente"
            echo "  stop        - Parar ambiente"
            echo "  restart     - Reiniciar ambiente"
            echo "  logs        - Monitorar logs em tempo real"
            echo "  status      - Verificar status dos servi√ßos"
            echo "  clean       - Limpar completamente o ambiente"
            echo "  attack-info - Mostrar informa√ß√µes de ataque"
            exit 1
            ;;
    esac
}

# Executar fun√ß√£o principal
main "$@"
