# Script de Verifica√ß√£o do Laborat√≥rio AD
# Autor: Lab Vuln
# Vers√£o: 1.0

function Write-ColorOutput {
    param([string]$Message, [string]$Color = "White")
    
    # Mapeamento de cores para garantir compatibilidade
    $ColorMap = @{
        "Red" = "Red"
        "Green" = "Green" 
        "Yellow" = "Yellow"
        "Blue" = "Blue"
        "White" = "White"
        "Cyan" = "Cyan"
        "Magenta" = "Magenta"
        "Gray" = "Gray"
        "DarkGray" = "DarkGray"
        "DarkRed" = "DarkRed"
        "DarkGreen" = "DarkGreen"
        "DarkYellow" = "DarkYellow"
        "DarkBlue" = "DarkBlue"
        "DarkCyan" = "DarkCyan"
        "DarkMagenta" = "DarkMagenta"
    }
    
    try {
        # Verificar se a cor √© v√°lida
        if ($ColorMap.ContainsKey($Color)) {
            Write-Host $Message -ForegroundColor $ColorMap[$Color]
        } else {
            # Fallback para cor padr√£o se n√£o for reconhecida
            Write-Host $Message -ForegroundColor "White"
        }
    }
    catch {
        # Fallback final se houver qualquer erro
        Write-Host $Message
    }
}

function Test-ADInstallation {
    Write-ColorOutput "=== VERIFICANDO INSTALA√á√ÉO DO AD ===" "Blue"
    
    $errors = @()
    
    # Verificar se √© Domain Controller
    try {
        $domainRole = (Get-WmiObject -Class Win32_ComputerSystem).DomainRole
        if ($domainRole -eq 5) {
            Write-ColorOutput "‚úÖ Servidor √© Domain Controller" "Green"
        } else {
            Write-ColorOutput "‚ùå Servidor n√£o √© Domain Controller (Role: $domainRole)" "Red"
            $errors += "Servidor n√£o √© DC"
        }
    }
    catch {
        Write-ColorOutput "‚ùå Erro ao verificar role do servidor" "Red"
        $errors += "Erro ao verificar role"
    }
    
    # Verificar se AD DS est√° instalado
    try {
        $adFeature = Get-WindowsFeature -Name AD-Domain-Services
        if ($adFeature.InstallState -eq "Installed") {
            Write-ColorOutput "‚úÖ AD Domain Services instalado" "Green"
        } else {
            Write-ColorOutput "‚ùå AD Domain Services n√£o instalado" "Red"
            $errors += "AD DS n√£o instalado"
        }
    }
    catch {
        Write-ColorOutput "‚ùå Erro ao verificar AD DS" "Red"
        $errors += "Erro ao verificar AD DS"
    }
    
    # Verificar se DNS est√° funcionando
    try {
        $dnsTest = Resolve-DnsName -Name "vulnlab.local" -ErrorAction SilentlyContinue
        if ($dnsTest) {
            Write-ColorOutput "‚úÖ DNS funcionando para vulnlab.local" "Green"
        } else {
            Write-ColorOutput "‚ùå DNS n√£o funcionando para vulnlab.local" "Red"
            $errors += "DNS n√£o funcionando"
        }
    }
    catch {
        Write-ColorOutput "‚ùå Erro ao testar DNS" "Red"
        $errors += "Erro no DNS"
    }
    
    return $errors
}

function Test-ADUsers {
    Write-ColorOutput "=== VERIFICANDO USU√ÅRIOS DO AD ===" "Blue"
    
    $errors = @()
    $expectedUsers = @("admin", "user1", "test", "guest", "admin2", "service", "backup", "webadmin")
    $foundUsers = @()
    
    try {
        Import-Module ActiveDirectory
        
        foreach ($user in $expectedUsers) {
            try {
                $adUser = Get-ADUser -Identity $user -ErrorAction SilentlyContinue
                if ($adUser) {
                    Write-ColorOutput "‚úÖ Usu√°rio encontrado: $user" "Green"
                    $foundUsers += $user
                } else {
                    Write-ColorOutput "‚ùå Usu√°rio n√£o encontrado: $user" "Red"
                    $errors += "Usu√°rio $user n√£o encontrado"
                }
            }
            catch {
                Write-ColorOutput "‚ùå Erro ao verificar usu√°rio $user" "Red"
                $errors += "Erro ao verificar $user"
            }
        }
        
        Write-ColorOutput "`nUsu√°rios encontrados: $($foundUsers.Count)/$($expectedUsers.Count)" "Yellow"
        
    }
    catch {
        Write-ColorOutput "‚ùå Erro ao importar m√≥dulo AD" "Red"
        $errors += "Erro ao importar m√≥dulo AD"
    }
    
    return $errors
}

function Test-ADGroups {
    Write-ColorOutput "=== VERIFICANDO GRUPOS DO AD ===" "Blue"
    
    $errors = @()
    $expectedGroups = @("VulnerableUsers", "TestGroup", "ServiceAccounts")
    $foundGroups = @()
    
    try {
        foreach ($group in $expectedGroups) {
            try {
                $adGroup = Get-ADGroup -Identity $group -ErrorAction SilentlyContinue
                if ($adGroup) {
                    Write-ColorOutput "‚úÖ Grupo encontrado: $group" "Green"
                    $foundGroups += $group
                } else {
                    Write-ColorOutput "‚ùå Grupo n√£o encontrado: $group" "Red"
                    $errors += "Grupo $group n√£o encontrado"
                }
            }
            catch {
                Write-ColorOutput "‚ùå Erro ao verificar grupo $group" "Red"
                $errors += "Erro ao verificar $group"
            }
        }
        
        Write-ColorOutput "`nGrupos encontrados: $($foundGroups.Count)/$($expectedGroups.Count)" "Yellow"
        
    }
    catch {
        Write-ColorOutput "‚ùå Erro ao verificar grupos" "Red"
        $errors += "Erro ao verificar grupos"
    }
    
    return $errors
}

function Test-VulnerableServices {
    Write-ColorOutput "=== VERIFICANDO SERVI√áOS VULNER√ÅVEIS ===" "Blue"
    
    $errors = @()
    
    # Verificar SMB1
    try {
        $smb1 = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\LanmanServer\Parameters" -Name "SMB1" -ErrorAction SilentlyContinue
        if ($smb1.SMB1 -eq 1) {
            Write-ColorOutput "‚úÖ SMB1 habilitado (vulner√°vel)" "Green"
        } else {
            Write-ColorOutput "‚ùå SMB1 n√£o habilitado" "Red"
            $errors += "SMB1 n√£o habilitado"
        }
    }
    catch {
        Write-ColorOutput "‚ùå Erro ao verificar SMB1" "Red"
        $errors += "Erro ao verificar SMB1"
    }
    
    # Verificar auditoria
    try {
        $auditPolicy = auditpol /get /category:"Account Logon" | Select-String "Success and Failure"
        if ($auditPolicy -match "No Auditing") {
            Write-ColorOutput "‚úÖ Auditoria desabilitada (vulner√°vel)" "Green"
        } else {
            Write-ColorOutput "‚ùå Auditoria habilitada" "Red"
            $errors += "Auditoria habilitada"
        }
    }
    catch {
        Write-ColorOutput "‚ùå Erro ao verificar auditoria" "Red"
        $errors += "Erro ao verificar auditoria"
    }
    
    # Verificar pol√≠ticas de senha
    try {
        $passwordPolicy = net accounts
        if ($passwordPolicy -match "Minimum password length.*0") {
            Write-ColorOutput "‚úÖ Pol√≠tica de senha fraca (vulner√°vel)" "Green"
        } else {
            Write-ColorOutput "‚ùå Pol√≠tica de senha forte" "Red"
            $errors += "Pol√≠tica de senha forte"
        }
    }
    catch {
        Write-ColorOutput "‚ùå Erro ao verificar pol√≠tica de senha" "Red"
        $errors += "Erro ao verificar pol√≠tica de senha"
    }
    
    return $errors
}

function Test-NetworkConnectivity {
    Write-ColorOutput "=== VERIFICANDO CONECTIVIDADE DE REDE ===" "Blue"
    
    $errors = @()
    $targetIP = "192.168.1.10"
    $ports = @(389, 445, 88, 53)
    
    # Testar conectividade b√°sica
    try {
        $ping = Test-Connection -ComputerName $targetIP -Count 1 -Quiet
        if ($ping) {
            Write-ColorOutput "‚úÖ Conectividade b√°sica OK" "Green"
        } else {
            Write-ColorOutput "‚ùå Sem conectividade b√°sica" "Red"
            $errors += "Sem conectividade b√°sica"
        }
    }
    catch {
        Write-ColorOutput "‚ùå Erro ao testar conectividade" "Red"
        $errors += "Erro na conectividade"
    }
    
    # Testar portas importantes
    foreach ($port in $ports) {
        try {
            $connection = Test-NetConnection -ComputerName $targetIP -Port $port -InformationLevel Quiet
            if ($connection.TcpTestSucceeded) {
                Write-ColorOutput "‚úÖ Porta $port aberta" "Green"
            } else {
                Write-ColorOutput "‚ùå Porta $port fechada" "Red"
                $errors += "Porta $port fechada"
            }
        }
        catch {
            Write-ColorOutput "‚ùå Erro ao testar porta $port" "Red"
            $errors += "Erro na porta $port"
        }
    }
    
    return $errors
}

function Test-IISInstallation {
    Write-ColorOutput "=== VERIFICANDO INSTALA√á√ÉO DO IIS ===" "Blue"
    
    $errors = @()
    
    try {
        $iisFeature = Get-WindowsFeature -Name Web-Server
        if ($iisFeature.InstallState -eq "Installed") {
            Write-ColorOutput "‚úÖ IIS instalado" "Green"
            
            # Verificar se est√° rodando
            $iisService = Get-Service -Name W3SVC -ErrorAction SilentlyContinue
            if ($iisService -and $iisService.Status -eq "Running") {
                Write-ColorOutput "‚úÖ Servi√ßo IIS rodando" "Green"
            } else {
                Write-ColorOutput "‚ùå Servi√ßo IIS n√£o est√° rodando" "Red"
                $errors += "IIS n√£o est√° rodando"
            }
        } else {
            Write-ColorOutput "‚ùå IIS n√£o instalado" "Red"
            $errors += "IIS n√£o instalado"
        }
    }
    catch {
        Write-ColorOutput "‚ùå Erro ao verificar IIS" "Red"
        $errors += "Erro ao verificar IIS"
    }
    
    return $errors
}

function Show-Summary {
    param([array]$AllErrors)
    
    Write-ColorOutput "`n=== RESUMO DA VERIFICA√á√ÉO ===" "Blue"
    
    if ($AllErrors.Count -eq 0) {
        Write-ColorOutput "üéâ TODOS OS TESTES PASSARAM!" "Green"
        Write-ColorOutput "‚úÖ Laborat√≥rio AD vulner√°vel est√° funcionando corretamente" "Green"
    } else {
        Write-ColorOutput "‚ö†Ô∏è  ENCONTRADOS $($AllErrors.Count) PROBLEMAS:" "Yellow"
        foreach ($errorItem in $AllErrors) {
            Write-ColorOutput "‚ùå $errorItem" "Red"
        }
        Write-ColorOutput "`nRecomenda√ß√µes:" "Yellow"
        Write-ColorOutput "1. Verifique se o script de instala√ß√£o foi executado completamente" "Yellow"
        Write-ColorOutput "2. Reinicie o servidor se necess√°rio" "Yellow"
        Write-ColorOutput "3. Execute novamente o script de instala√ß√£o" "Yellow"
    }
    
    Write-ColorOutput "`n=== INFORMA√á√ïES DO SISTEMA ===" "Blue"
    Write-ColorOutput "Sistema Operacional: $((Get-WmiObject -Class Win32_OperatingSystem).Caption)" "Yellow"
    Write-ColorOutput "Dom√≠nio: $env:USERDOMAIN" "Yellow"
    Write-ColorOutput "Computador: $env:COMPUTERNAME" "Yellow"
    Write-ColorOutput "IP: $(Get-NetIPAddress -AddressFamily IPv4 | Where-Object {$_.IPAddress -notlike "127.*" -and $_.IPAddress -notlike "169.*"} | Select-Object -First 1 -ExpandProperty IPAddress)" "Yellow"
}

# FUN√á√ÉO PRINCIPAL
function Verify-ADLab {
    Write-ColorOutput "=== VERIFICADOR DE LABORAT√ìRIO AD ===" "Blue"
    Write-ColorOutput "Lab Vuln - Ambiente de Seguran√ßa" "Blue"
    Write-ColorOutput "Vers√£o: 1.0" "Blue"
    Write-ColorOutput "Data: $(Get-Date)" "Blue"
    
    $allErrors = @()
    
    # Executar verifica√ß√µes
    $checks = @(
        @{Name = "Instala√ß√£o do AD"; Function = "Test-ADInstallation"},
        @{Name = "Usu√°rios do AD"; Function = "Test-ADUsers"},
        @{Name = "Grupos do AD"; Function = "Test-ADGroups"},
        @{Name = "Servi√ßos Vulner√°veis"; Function = "Test-VulnerableServices"},
        @{Name = "Conectividade de Rede"; Function = "Test-NetworkConnectivity"},
        @{Name = "Instala√ß√£o do IIS"; Function = "Test-IISInstallation"}
    )
    
    foreach ($check in $checks) {
        Write-ColorOutput "`nExecutando: $($check.Name)" "Blue"
        $errors = & $check.Function
        $allErrors += $errors
    }
    
    Show-Summary -AllErrors $allErrors
}

# Executar verifica√ß√£o
Verify-ADLab 